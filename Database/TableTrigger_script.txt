use test;

CREATE TABLE PATIENT
(   PNUMBER     CHAR(8) NOT NULL PRIMARY KEY,
    PID         CHAR(8),                        
    FULLNAME    VARCHAR(15) NOT NULL,
    PHONE       CHAR(9),        
    GENDER      CHAR(1),
    ADDRESS     VARCHAR(30),
    RISK_LEVEL  ENUM('1','2','3')
);

Create table employee
(
    ID char(4) PRIMARY KEY,
    address varchar(255),
    phone varchar(10),
    fullname varchar(30),
    Employee_type ENUM('STAFF','VOLUNTEER','NURSE','MANAGER','DOCTOR')
);
create table BUILDING
(
    BUILDING_ID VARCHAR(3) PRIMARY KEY,
    BUILDING_NAME   VARCHAR(20) UNIQUE NOT NULL
);
create table ROOM
(
    ROOM_ID     CHAR(3),
    BUILDING_ID VARCHAR(3),
    ROOM_TYPE   ENUM ('Normal', 'Emergency', 'Recuperation'),            -- 1 byte
    CAPACITY    INT,
    NUMPATIENT  INT,
    PRIMARY KEY (ROOM_ID, BUILDING_ID),
    CHECK   (ROOM_ID    BETWEEN 100 AND 650),
    CHECK   (NUMPATIENT < CAPACITY),
    CONSTRAINT fk_building_id
               FOREIGN KEY (BUILDING_ID) REFERENCES BUILDING(BUILDING_ID)
               ON DELETE CASCADE
               ON UPDATE CASCADE
);
CREATE TABLE MEDICINE(
    MCODE   INT     PRIMARY KEY     AUTO_INCREMENT,
    MNAME   VARCHAR(30)     NOT NULL,
    EFFECT  TEXT,
    PRICE   DECIMAL(10,2),
    EXP DATE    NOT NULL
);
CREATE TABLE TEST_RESULT (
    TEST_ID INT,            
    PNUMBER  CHAR(8) NOT NULL,
    DATE_TIME DATETIME ,                      
    RESPIRATORY_RATE DECIMAL(5,2),          
    SPO2 DECIMAL(5,2),                    
    PCR_ct_value DECIMAL(5,2),              
    PCR_result BOOLEAN,                    
    QT_ct_value DECIMAL(5,2),              
    QT_result BOOLEAN,                      
    PRIMARY KEY (PNUMBER, TEST_ID),
    CONSTRAINT fk_pnumber FOREIGN KEY (PNUMBER)
                          REFERENCES PATIENT(PNUMBER)
                          ON DELETE CASCADE
                          ON UPDATE CASCADE
);
CREATE TABLE CONDUCT_RESULT (
    TEST_ID INT,
    PNUM CHAR(8),
    TESTER_ID CHAR(4),
    PRIMARY KEY (TEST_ID, PNUM, TESTER_ID),
    CONSTRAINT fk_pnum FOREIGN KEY (PNUM, TEST_ID) REFERENCES TEST_RESULT(PNUMBER, TEST_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_testerid FOREIGN KEY (TESTER_ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IS_ASSIGNED_TO (
   PNUM CHAR(8),
   ASSIGN_DATE DATE,
   ASSIGN_TIME TIME,
   ROOM_ID CHAR(3),
   BUILDING_ID VARCHAR(3),
   CURRENT_STATUS ENUM('1','2','3'),
   PRIMARY KEY (PNUM, ASSIGN_DATE, ASSIGN_TIME, ROOM_ID, BUILDING_ID),
   CONSTRAINT fk_room FOREIGN KEY (ROOM_ID, BUILDING_ID) REFERENCES ROOM(ROOM_ID, BUILDING_ID)  
              ON DELETE CASCADE
              ON UPDATE CASCADE,
	constraint fk_pnum_assign_to foreign key (pnum) references patient(pnumber)
	ON DELETE CASCADE
	on UPDATE CASCADE
);

CREATE TABLE SYMPTOMS
(   PNUM    CHAR(8),
    SYMP_NAME VARCHAR(30),
    START_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    END_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    SERIOUS_LEVEL  ENUM('1','2','3'),
    PRIMARY KEY (PNUM, SYMP_NAME, START_DATE),
    CONSTRAINT SYMP1 FOREIGN KEY (PNUM)
               REFERENCES PATIENT(PNUMBER)
               ON UPDATE CASCADE
               ON DELETE CASCADE
);


CREATE TABLE COMORBIDITY
(
    COMORBIDITY_NAME VARCHAR(100) PRIMARY KEY,
    COMO_DESCRIPTION VARCHAR(255)
);
CREATE TABLE PATIENT_HAS_COMORBIDITY
(
    PNUM CHAR(8),
    COMORBIDITY_NAME VARCHAR(100),
    PRIMARY KEY (PNUM, COMORBIDITY_NAME),
    CONSTRAINT PHC1 FOREIGN KEY (PNUM)
               REFERENCES PATIENT(PNUMBER)
               ON UPDATE CASCADE
               ON DELETE CASCADE,
    CONSTRAINT PHC2 FOREIGN KEY (COMORBIDITY_NAME)
               REFERENCES COMORBIDITY(COMORBIDITY_NAME)
               ON UPDATE CASCADE
               ON DELETE CASCADE
);

CREATE TABLE ADMIT_DATE
(
    PNUM CHAR(8),
    ADMITTER_ID CHAR(8),
    TRANSFERED_ADDRESS VARCHAR(255),
    ADMIT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (PNUM, ADMITTER_ID, ADMIT_DATE),
    CONSTRAINT A1 FOREIGN KEY (PNUM)
               REFERENCES PATIENT(PNUMBER)
               ON UPDATE CASCADE
               ON DELETE CASCADE,
    CONSTRAINT A2 FOREIGN KEY (ADMITTER_ID)
               REFERENCES EMPLOYEE(ID)
               ON UPDATE CASCADE
               ON DELETE CASCADE

);

CREATE TABLE DISCHARGE_DATE
(
    PNUM CHAR(8),
    DISCHARGE_ID CHAR(8),
    DISCHARGE_DAY DATETIME DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (PNUM, DISCHARGE_ID, DISCHARGE_DAY),
CONSTRAINT D1 FOREIGN KEY (PNUM)
               REFERENCES PATIENT(PNUMBER)
               ON UPDATE CASCADE
               ON DELETE CASCADE,
CONSTRAINT D2 FOREIGN KEY (DISCHARGE_ID)
               REFERENCES EMPLOYEE(ID)
               ON UPDATE CASCADE
               ON DELETE CASCADE
);

CREATE TABLE TAKE_CARE_PERIOD(
    PNUM    CHAR(8),
    CAREGIVER_ID    CHAR(4),
    START_DATE DATETIME,
    END_DATE    DATETIME,
    CONSTRAINT TCP1 PRIMARY KEY (PNUM, CAREGIVER_ID, START_DATE),
    CONSTRAINT TCP2 FOREIGN KEY (PNUM) REFERENCES PATIENT(PNUMBER) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT TCP4 FOREIGN KEY (CAREGIVER_ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT TCP3 CHECK (END_DATE > START_DATE)
);

CREATE TABLE TREATMENT_RECORD(
    PNUM    CHAR(8),
    TREAT_ID    INT,
    START_DATE  DATETIME    NOT NULL,
    END_DATE    DATETIME,
    RESULT TEXT,
    CONSTRAINT TR1 PRIMARY KEY (PNUM, TREAT_ID),
    CONSTRAINT TR2 FOREIGN KEY (PNUM) REFERENCES PATIENT(PNUMBER) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT TR3 CHECK (END_DATE > START_DATE)
);

CREATE TABLE MAKE_TREATRECORD(
    PNUM CHAR(8),
    TREAT_ID    INT,
    DOCTOR_ID   CHAR(4),
    CONSTRAINT PK_PNUM_TREATID_DOCTORID PRIMARY KEY (PNUM, TREAT_ID, DOCTOR_ID),
    CONSTRAINT FK_PNUM_TREATID FOREIGN KEY (PNUM, TREAT_ID) REFERENCES TREATMENT_RECORD(PNUM, TREAT_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FK_DOCTOR_ID FOREIGN KEY (DOCTOR_ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE HAS_MEDICINE(
    PNUM CHAR(8),
    TREAT_ID    INT,
    MCODE   INT,
    QUANTITY INT NOT NULL,
    CONSTRAINT HM1 PRIMARY KEY (PNUM, TREAT_ID, MCODE),
    CONSTRAINT HM2 FOREIGN KEY (PNUM, TREAT_ID) REFERENCES TREATMENT_RECORD(PNUM, TREAT_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT HM3 FOREIGN KEY (MCODE) REFERENCES MEDICINE(MCODE) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE Head_Doctor (
    ID char(4) PRIMARY KEY,
    START_DATE DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ID) REFERENCES EMPLOYEE(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Chỉnh type cho phù hợp:
ALTER TABLE symptoms
MODIFY COLUMN SYMP_NAME VARCHAR(200);
ALTER TABLE Patient MODIFY address TEXT;
ALTER TABLE Patient MODIFY PID VARCHAR(12);
ALTER TABLE Patient MODIFY fullname VARCHAR(30);

-- Trigger cho test ID
DELIMITER $$
DROP TRIGGER IF EXISTS trigger1_test_result$$
CREATE TRIGGER trigger1_test_result
BEFORE INSERT ON test_result
FOR EACH ROW
BEGIN
    DECLARE max_test_id INT; -- Variable to hold the maximum TEST_ID
    
    SELECT MAX(TEST_ID) 
    INTO max_test_id
    FROM test_result
    WHERE PNUMBER = NEW.PNUMBER;
    
    -- If no record exists for the PNUMBER, set TEST_ID to '1'
    IF max_test_id IS NULL THEN
        SET NEW.TEST_ID = 1;
    ELSE
        -- Otherwise, increment the maximum TEST_ID by 1
        SET NEW.TEST_ID = max_test_id + 1;
    END IF;
END$$

DELIMITER ;

-- Trigger cho Treatment Record
DELIMITER $$
DROP TRIGGER IF EXISTS trigger2_treatment_record$$
CREATE TRIGGER trigger2_treatment_record
BEFORE INSERT ON treatment_record
FOR EACH ROW
BEGIN
    DECLARE max_treatment_record INT; -- Variable to hold the maximum TEST_ID
    
    SELECT MAX(TREAT_ID) 
    INTO max_treatment_record
    FROM treatment_record
    WHERE PNUM = NEW.PNUM;
    
    -- If no record exists for the PNUM, set TREAT_ID to '1'
    IF max_treatment_record IS NULL THEN
        SET NEW.TREAT_ID = 1;
    ELSE
        -- Otherwise, increment the maximum treatment_record by 1
        SET NEW.TREAT_ID = max_treatment_record + 1;
    END IF;
END$$

DELIMITER ;


SET GROUP_CONCAT_MAX_LEN=32768; -- Increase the max length for GROUP_CONCAT SELECT GROUP_CONCAT('DROP TABLE IF EXISTS `', table_name, '`;') FROM information_schema.tables WHERE table_schema = 'your_database_name';




DELIMITER $$
CREATE TRIGGER CHECK_ASSIGNED_DATE
BEFORE INSERT ON IS_ASSIGNED_TO
FOR EACH ROW
BEGIN
    DECLARE ADMIT_DAY DATE;
    
    SELECT ADMIT_DATE INTO ADMIT_DAY
    FROM ADMIT_DATE
    WHERE PNUM = NEW.PNUM
    LIMIT 1; -- Ensures only one row is selected

    -- Check if ASSIGN_DATE is before ADMIT_DAY
    IF NEW.ASSIGN_DATE <= ADMIT_DAY THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'ASSIGN_DATE must be after or equal to ADMIT_DAY';
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER CHECK_DISCHARGED_DATE
BEFORE INSERT ON DISCHARGE_DATE
FOR EACH ROW
BEGIN
    DECLARE ADMIT_DAY DATE;
    
	SELECT MAX(ADMIT_DATE) INTO ADMIT_DAY
    FROM ADMIT_DATE
    WHERE PNUM = NEW.PNUM;
    -- LIMIT 1; -- Ensures only one row is selected

    -- Check if ASSIGN_DATE is before ADMIT_DAY
    IF NEW.DISCHARGE_DAY <= ADMIT_DAY THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'DISCHARGE_DATE must be after or equal to ADMIT_DAY';
    END IF;
END $$
DELIMITER ;

-- Automatically generate pnumber
DELIMITER $$
CREATE TRIGGER trg_generate_pnumber
BEFORE INSERT ON Patient
FOR EACH ROW
BEGIN
    DECLARE next_pnumber INT;
    SELECT IFNULL(MAX(CAST(Pnumber AS UNSIGNED)), 0) INTO next_pnumber FROM Patient;
    SET NEW.Pnumber = LPAD(next_pnumber + 1, 8, '0');
END;
$$
DELIMITER ;
